<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/com/ecochallenge/database/ConexaoMySQL.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/ecochallenge/database/ConexaoMySQL.java" />
              <option name="originalContent" value="package com.ecochallenge.database;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;import java.util.Properties;&#10;&#10;/**&#10; * Classe responsável por gerenciar a conexão com o banco de dados Supabase (PostgreSQL)&#10; */&#10;public class ConexaoMySQL {&#10;&#10;    // Configurações do banco de dados Supabase&#10;    private static final String URL = &quot;jdbc:postgresql://db.wtxiarcntplgpviljvwz.supabase.co:5432/postgres?sslmode=require&quot;;&#10;    private static final String USUARIO = &quot;postgres&quot;;&#10;    private static final String SENHA = &quot;$enhaEcoChallenge&quot;;&#10;&#10;    private static final String DRIVER_CLASS = &quot;org.postgresql.Driver&quot;;&#10;&#10;    /**&#10;     * Obtém uma conexão com o banco de dados&#10;     * @return Connection objeto de conexão&#10;     * @throws SQLException se houver erro na conexão&#10;     */&#10;    public static Connection obterConexao() throws SQLException {&#10;        try {&#10;            // Carrega o driver JDBC PostgreSQL&#10;            Class.forName(DRIVER_CLASS);&#10;&#10;            Properties props = new Properties();&#10;            props.setProperty(&quot;user&quot;, USUARIO);&#10;            props.setProperty(&quot;password&quot;, SENHA);&#10;            props.setProperty(&quot;ssl&quot;, &quot;true&quot;);&#10;&#10;            return DriverManager.getConnection(URL, props);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;Driver PostgreSQL não encontrado. Adicione postgresql-connector-java ao classpath.&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Testa a conexão com o banco de dados&#10;     * @return true se a conexão foi bem-sucedida&#10;     */&#10;    public static boolean testarConexao() {&#10;        try (Connection conn = obterConexao()) {&#10;            return conn != null &amp;&amp; !conn.isClosed();&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Erro ao testar conexão: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Fecha uma conexão de forma segura&#10;     * @param conexao a conexão a ser fechada&#10;     */&#10;    public static void fecharConexao(Connection conexao) {&#10;        if (conexao != null) {&#10;            try {&#10;                conexao.close();&#10;            } catch (SQLException e) {&#10;                System.err.println(&quot;Erro ao fechar conexão: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ecochallenge.database;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;import java.util.Properties;&#10;&#10;/**&#10; * Classe responsável por gerenciar a conexão com o banco de dados Supabase (PostgreSQL)&#10; */&#10;public class ConexaoSupabase {&#10;&#10;    // Configurações do banco de dados Supabase&#10;    private static final String URL = &quot;jdbc:postgresql://db.wtxiarcntplgpviljvwz.supabase.co:5432/postgres?sslmode=require&quot;;&#10;    private static final String USUARIO = &quot;postgres&quot;;&#10;    private static final String SENHA = &quot;$enhaEcoChallenge&quot;;&#10;&#10;    private static final String DRIVER_CLASS = &quot;org.postgresql.Driver&quot;;&#10;&#10;    /**&#10;     * Obtém uma conexão com o banco de dados&#10;     * @return Connection objeto de conexão&#10;     * @throws SQLException se houver erro na conexão&#10;     */&#10;    public static Connection obterConexao() throws SQLException {&#10;        try {&#10;            // Carrega o driver JDBC PostgreSQL&#10;            Class.forName(DRIVER_CLASS);&#10;&#10;            Properties props = new Properties();&#10;            props.setProperty(&quot;user&quot;, USUARIO);&#10;            props.setProperty(&quot;password&quot;, SENHA);&#10;            props.setProperty(&quot;ssl&quot;, &quot;true&quot;);&#10;&#10;            return DriverManager.getConnection(URL, props);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;Driver PostgreSQL não encontrado. Adicione postgresql-connector-java ao classpath.&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Testa a conexão com o banco de dados&#10;     * @return true se a conexão foi bem-sucedida&#10;     */&#10;    public static boolean testarConexao() {&#10;        try (Connection conn = obterConexao()) {&#10;            return conn != null &amp;&amp; !conn.isClosed();&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Erro ao testar conexão: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Fecha uma conexão de forma segura&#10;     * @param conexao a conexão a ser fechada&#10;     */&#10;    public static void fecharConexao(Connection conexao) {&#10;        if (conexao != null) {&#10;            try {&#10;                conexao.close();&#10;            } catch (SQLException e) {&#10;                System.err.println(&quot;Erro ao fechar conexão: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>